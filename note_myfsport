
=============================busybox config====================================
1.  cp fa.config .config
    git add -f .config
    git commit -a 
2.  CROSS_COMPILE ?= arm-linux-
    ARCH ?= arm

if host make is new version, need modify old style script as new style:
such as:
A.
OLD STYLE>>>>>
  config %config:dependecy
 	cmd
  modify to below:
NEW STYLE>>>>>
   config:dependecy
       cmd
   %config:dependecy
       cmd
B.
OLD STYLE>>>>>
  / %/: dependecy
 	cmd
  modify to below:
NEW STYLE>>>>>
  /:dependecy
       cmd
 %/:dependecy
       cmd

3. 
本篇文章来源于 Linux公社网站(www.linuxidc.com)  原文链接：http://www.linuxidc.com/Linux/2011-02/32772p5.htm
a、根文件系统的目录结构
bin 存放所有用户都可以使用的、基本的命令。
sbin 存放的是基本的系统命令，它们用于启动系统、修复系统等。
usr 里面存放的是共享、只读的程序和数据。
proc 这是个空目录，常作为proc文件系统的挂载点。
dev 该目录存放设备文件和其它特殊文件。
etc 存放系统配置文件，包括启动文件。
lib 存放共享库和可加载块(即驱动程序)，共享库用于启动系统、运行根文件系统中的可执行程序。
boot 引导加载程序使用的静态文件
home 用户主目录，包括供服务账号锁使用的主目录，如FTP
mnt 用于临时挂接某个文件系统的挂接点，通常是空目录。也可以在里面创建空的子目录。
opt 给主机额外安装软件所摆放的目录。
root root用户的主目录
tmp 存放临时文件，通常是空目录。
var 存放可变的数据
本篇文章来源于 Linux公社网站(www.linuxidc.com)  原文链接：http://www.linuxidc.com/Linux/2011-02/32772p5.htm

b. add bash script for make dirs :
mk_myrootfs.sh 
#!/bin/sh
echo "------Create rootfs directons start...--------"
mkdir rootfs
cd rootfs
echo "--------Create root,dev....----------"
mkdir root dev etc boot tmp var sys proc lib mnt home usr
mkdir etc/init.d etc/rc.d etc/sysconfig
mkdir usr/sbin usr/bin usr/lib usr/modules

mkdir proc/sys mkidr proc/sys/kernel 

mkdir proc/sys/kernel/

echo "make node in dev/console dev/null"
mknod -m 600 dev/console c 5 1
mknod -m 600 dev/null c 1 3
mkdir mnt/etc mnt/jffs2 mnt/yaffs mnt/data mnt/temp
mkdir var/lib var/lock var/run var/tmp
chmod 1777 tmp
chmod 1777 var/tmp
echo "-------make direction done---------" 

c. 改变执行的权限
 chmod 777 mkrootfs.sh
 ./mkrootfs.sh
//==============================================================================
d. make  menuconfig
[A]指定安装位置：

Busybox Settings  --->

Installation Options ("make install" behavior)  --->

BusyBox installation prefix-->

输入：../rootfs //实际中，要根据计划的文件系统根设定！ 

[B]指定mdev动态文件系统

Linux System Utilities --->

[*]Support /etc/mdev.conf

[*]Support command execution at device addition/removal

说明：在busybox中配置对dev下设备类型的支持dev的创建有三种方法： 
（1）手动创建：在制作根文件系统的时候，就在 dev目录下创建好要使用的设备文件，系统
挂接根文件系统后，就可以使用 dev目录下的设备文件了。  
（2）使用 devfs 文件系统：这种方法已经过时，具有不确定的设备映射、没有足够的主/次设备号、devfs 消耗大量的内存。  
（3）udev： 它是个用户程序，（u是指user space ,dev 是指device）能根据系统中硬件设备的状态动态的更新设备文件，包括设备文件的创建、删除等。使用udev机制也不需要/dev目录下创建设备节点， 它需要一些用户程序的支持，并且内核要支持sysfs文件系统。它的操作相对复杂，但灵活性很高 。mdev 是 busybox 自带的一个简化版的 udev，适合于嵌入式的应用埸合。其具有使用简单的特点。它的作用，就是在系统启动和热插拔或动态加载驱动程序时，自动产生驱动程序所需的节点文件。在以busybox 为基础构建嵌入式linux 的根文件系统时，使用它是最优的选择。配置时需要增加对 mdev的支持。 

4、编译Busybox

make
//==============================================================================
5、安装Busybox

make uninstall

make CONFIG_PREFIX=/work/nfs_root/fs_mini install

在work/nfs_root/下面自动生成fs_mini目录，并且在此目录下生成一些文件、目录。
//==============================================================================
6、安装glibc

cd /work/nfs_root/fs_mini

mkdir lib

cd /work/tools/gcc-3.4.5-glibc-2.3.6/arm-linux/lib

cp *.so* /work/nfs_root/fs_mini/lib 

通过以下命令查看一个程序会用到哪些库？

arm-linux-readelf -a "your binary" | grep "share" 

grep与"share"间记得要空格 

例如：

root@huanghuang-desktop:/work/busybox-1.9.2# arm-linux-readelf -a busybox | grep "Shared"
0x00000001 (NEEDED) Shared library: [libcrypt.so.1]
0x00000001 (NEEDED) Shared library: [libm.so.6]
0x00000001 (NEEDED) Shared library: [libc.so.6]
加载器是.so、so.2结尾的。。

从上面的信息可以看出没有加载器。

//=======================================================================================
在etc目录下的内容主要取决于要运行的程序，

这里只需要创建3个文件即可：etc/inittab、etc/init.d/rcS、etc/fstab。

root@huanghuang-desktop:/work/nfs_root/fs_mini# mkdir etc

root@huanghuang-desktop:/work/nfs_root/fs_mini# ls
bin etc lib linuxrc sbin usr

1、仿照Busybox的examples/inittab，创建etc/inittab

root@huanghuang-desktop:/work/nfs_root/fs_mini# cd etc

root@huanghuang-desktop:/work/nfs_root/fs_mini/etc# gedit inittab

# /etc/inittab
::sysinit:/etc/init.d/rcS
ttySAC0::askfirst:-/bin/sh
::ctrlaltdel:/sbin/reboot
::shutdown:/bin/umount -a -r

2、创建一个脚本文件/etc/init.d/rcS,

root@huanghuang-desktop:/work/nfs_root/fs_mini/etc# mkdir init.d

root@huanghuang-desktop:/work/nfs_root/fs_mini/etc# cd init.d
root@huanghuang-desktop:/work/nfs_root/fs_mini/etc/init.d# ls
root@huanghuang-desktop:/work/nfs_root/fs_mini/etc/init.d# gedit rcS

#!/bin/sh
ifconfig eth0 172.22.136.38
mount -a

root@huanghuang-desktop:/work/nfs_root/fs_mini/etc/init.d# chmod +x rcS

root@huanghuang-desktop:/work/nfs_root/fs_mini/etc/init.d# ls -l
总计 8
-rwxr-xr-x 1 root root 47 2009-12-11 21:27 rcS
-rw-r--r-- 1 root root 47 2009-12-11 21:27 rcS~
3、创建etc/fstab，来定义文件系统的“静态信息”，这些信息来控制mount的行为。

root@huanghuang-desktop:/work/nfs_root/fs_mini/etc# gedit fstab

#device mount-point type options dump fsck order
proc /proc proc defaults 0 0
tmpfs /tmp tmpfs defaults 0 0













